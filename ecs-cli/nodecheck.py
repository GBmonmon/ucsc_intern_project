import subprocess
import time
from swarminit import SSHclient
import boto3
import sys
import json
import re


################################################
# This is recover program
# 3 nodes cluster could handle 1 failure
# 5 nodes cluster could handle 2 failure ... etc
################################################


with open('aws-multiple.json', 'r') as fh:
    json_data = json.load(fh)

path_to_pem = json_data['manager']['ssh_private_key_path']
ssh_username = json_data['manager']['ssh_username']


# make sure the replacement node generated by ecs is up and running
bol = True
while bol:
    client_ec2 = boto3.client('ec2','us-west-1')
    reservations = client_ec2.describe_instances(
        Filters=[
            {
                'Name': 'instance-state-name',
                'Values': ['running']
            },
            {
                'Name':'tag:Name',
                'Values':['ECS Instance - amazon-ecs-cli-setup-ecs-cluster-1']
            }

        ]
    )['Reservations']
    time.sleep(4)
    sg_ids = list()
    ec2_ips = list()
    for reservation in reservations:
        instances = reservation['Instances']
        for instance in instances:
            ec2_public_ip = instance['PublicIpAddress']
            ec2_private_ip = instance['PrivateIpAddress']
            ec2_ips.append({'public':ec2_public_ip, 'private':ec2_private_ip})

            sg_id = instance['SecurityGroups'][0]['GroupId']
            sg_ids.append(sg_id)
    if len(ec2_ips) == 3:
        bol = False
        break
    else:
        print('waiting ec2 to be up and running...')
        print(ec2_ips)
        time.sleep(4)
        continue
        


# rejoin the docker swarm

#1. get the newly created node's ip
print(ec2_ips)
publicips = [ i['public'] for i in ec2_ips ]
print(publicips)

oldNodeIp = list()
newNodeIp = list()
for publicip in publicips:
    ssh = SSHclient(host_ip=publicip, port=22, username=ssh_username, key=path_to_pem)
    stout = ssh.execute('docker node ls 2> /dev/null')['out'].decode()
    #print(stout)
    #print(len(stout))
    if len(stout) == 0:
        newNodeIp.append(publicip)
    if len(stout) != 0:
        oldNodeIp.append(publicip)  
    ssh.close()

#2. get join token from manaer
join_tokens = list()
for publicip in oldNodeIp:
    ssh = SSHclient(host_ip=publicip, port=22, username=ssh_username, key=path_to_pem)
    output = ssh.execute("docker swarm join-token manager")['out'].decode()
    join_token =  re.search('docker swarm join .*' ,output).group(0)
    join_tokens.append(join_token)
    print("Available join_token:", join_token)
    ssh.close() 
#3. join the new node to docker swarm 
join_token_to_use = join_tokens[0]
workerNumber = 1
for publicip in newNodeIp:
    ssh = SSHclient(host_ip=publicip, port=22, username=ssh_username, key=path_to_pem)
    outMessage =  ssh.execute(join_token_to_use)['out'].decode()
    ssh.close()
    print('New node{}:'.format(workerNumber),outMessage)
    workerNumber+=1

vote_url1 = publicips[0]+':5000'
vote_url2 = publicips[1]+':5000'
vote_url3 = publicips[2]+':5000'
result_url1 = publicips[0]+':5001'
result_url2 = publicips[1]+':5001'
result_url3 = publicips[2]+':5001'
print(""""
#########################################################
# URL
#########################################################
""")
print('Vote site URL:\n'+vote_url1 + '\n' + vote_url2 + '\n' + vote_url3 + '\n\n' )
print('Vote site URL:\n'+result_url1 + '\n' + result_url2 + '\n' + result_url3 )
